---

# ansible-playbook -e hostname=<hostname> -K fedora.yml

- hosts: 127.0.0.1
  connection: local
  tasks:

  - assert: { that: hostname is defined }

  - shell: gsettings get org.gnome.Terminal.ProfilesList default | tr -d \'
    register: gsettings_terminal_profile
    changed_when: no

  - set_fact:
      gsettings: "{{ gsettings | default([]) }} + [{{ item }}]"
    loop:
      - { schema: "org.gnome.Maps", key: "night-mode", value: "true" }
      - { schema: "org.gnome.Terminal.Legacy.Profile", path: ":/org/gnome/terminal/legacy/profiles:/:{{ gsettings_terminal_profile.stdout }}/", key: "default-size-columns", value: "132" }
      - { schema: "org.gnome.Terminal.Legacy.Profile", path: ":/org/gnome/terminal/legacy/profiles:/:{{ gsettings_terminal_profile.stdout }}/", key: "default-size-rows", value: "43" }
      - { schema: "org.gnome.desktop.calendar", key: "show-weekdate", value: "true" }
      - { schema: "org.gnome.desktop.interface", key: "gtk-theme", value: "'Adwaita-dark'" }
      - { schema: "org.gnome.desktop.media-handling", key: "autorun-never", value: "true" }
      - { schema: "org.gnome.desktop.notifications", key: "show-in-lock-screen", value: "false" }
      - { schema: "org.gnome.desktop.privacy", key: "remember-recent-files", value: "false" }
      - { schema: "org.gnome.desktop.privacy", key: "remove-old-temp-files", value: "true" }
      - { schema: "org.gnome.desktop.session", key: "idle-delay", value: "uint32 0" }
      - { schema: "org.gnome.desktop.wm.preferences", key: "button-layout", value: "'appmenu:minimize,maximize,close'" }
      - { schema: "org.gnome.nautilus.preferences", key: "default-folder-viewer", value: "'list-view'" }
      - { schema: "org.gnome.settings-daemon.plugins.color", key: "night-light-enabled", value: "true" }
      - { schema: "org.gnome.settings-daemon.plugins.media-keys", key: "control-center", value: "['Tools']" }
      - { schema: "org.gnome.settings-daemon.plugins.media-keys", key: "custom-keybindings", value: "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/']" }
      - { schema: "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding", path: ":/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/", key: "binding", value: "'<Primary><Alt>t'" }
      - { schema: "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding", path: ":/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/", key: "command", value: "'gnome-terminal'" }
      - { schema: "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding", path: ":/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/", key: "name", value: "'Terminal'" }
      - { schema: "org.gnome.settings-daemon.plugins.power", key: "idle-dim", value: "false" }
      - { schema: "org.gnome.settings-daemon.plugins.power", key: "sleep-inactive-battery-type", value: "'nothing'" }
      - { schema: "org.gnome.shell", key: "enabled-extensions", value: "@as []" }
      - { schema: "org.gnome.shell", key: "favorite-apps", value: "['firefox.desktop', 'org.gnome.Nautilus.desktop', 'org.gnome.Software.desktop', 'org.gnome.Terminal.desktop', 'com.spotify.Client.desktop']" }

  - command: gsettings get "{{ item.schema }}{{ item.path | default() }}" "{{ item.key }}"
    loop: "{{ gsettings }}"
    register: gsettings_previous
    changed_when: no

  - command: gsettings set "{{ item.schema }}{{ item.path | default() }}" "{{ item.key }}" "{{ item.value }}"
    loop: "{{ gsettings }}"
    loop_control: { index_var: idx }
    when: item.value != gsettings_previous.results[idx].stdout

  - command: find "{{ ansible_env.HOME }}/.mozilla/firefox" -maxdepth 1 -type d -name "*.default-release" -print -quit
    register: firefox_profile
    changed_when: no

  - shell: >
      grep -P -o '(?<=user_pref\("browser.uiCustomization.state", ).*(?=\);)' "{{ firefox_profile.stdout }}/prefs.js" |
      perl -p -e 's/,\\"(customizableui-special-spring1|customizableui-special-spring2|fxa-toolbar-menu-button|home-button|library-button|sidebar-button)\\"//g'
    register: firefox_ui_state
    changed_when: no

  - shell: >
      grep -P -o '(?<=user_pref\("browser.pageActions.persistedActions", ).*(?=\);)' "{{ firefox_profile.stdout }}/prefs.js" |
      perl -p -e 's/(?<=\\"idsInUrlbar\\":\[)\\"pocket\\",//g'
    register: firefox_page_actions
    changed_when: no

  - set_fact:
      firefox_prefs: "{{ firefox_prefs | default([]) }} + [{{ item }}]"
    loop:
      - { key: "app.shield.optoutstudies.enabled", value: "false" }
      - { key: "browser.ctrlTab.recentlyUsedOrder", value: "false" }
      - { key: "browser.newtabpage.activity-stream.asrouter.userprefs.cfr.addons", value: "false" }
      - { key: "browser.newtabpage.activity-stream.asrouter.userprefs.cfr.features", value: "false" }
      - { key: "browser.newtabpage.activity-stream.feeds.section.highlights", value: "false" }
      - { key: "browser.newtabpage.activity-stream.feeds.snippets", value: "false" }
      - { key: "browser.newtabpage.activity-stream.feeds.topsites", value: "false" }
      - { key: "browser.newtabpage.activity-stream.showSearch", value: "false" }
      - { key: "browser.newtabpage.enabled", value: "false" }
      - { key: "browser.pageActions.persistedActions", value: "{{ firefox_page_actions.stdout }}" }
      - { key: "browser.startup.homepage", value: "\"about:blank\"" }
      - { key: "browser.uiCustomization.state", value: "{{ firefox_ui_state.stdout }}" }
      - { key: "browser.urlbar.suggest.bookmark", value: "false" }
      - { key: "browser.urlbar.suggest.history", value: "false" }
      - { key: "browser.urlbar.suggest.openpage", value: "false" }
      - { key: "browser.urlbar.suggest.topsites", value: "false" }
      - { key: "datareporting.healthreport.uploadEnabled", value: "false" }
      - { key: "dom.security.https_only_mode", value: "true" }
      - { key: "dom.security.https_only_mode_ever_enabled", value: "true" }
      - { key: "intl.regional_prefs.use_os_locales", value: "true" }
      - { key: "layout.spellcheckDefault", value: "0" }
      - { key: "media.eme.enabled", value: "true" }
      - { key: "permissions.default.desktop-notification", value: "2" }
      - { key: "permissions.default.geo", value: "2" }
      - { key: "privacy.donottrackheader.enabled", value: "true" }
      - { key: "signon.management.page.breach-alerts.enabled", value: "false" }
      - { key: "signon.rememberSignons", value: "false" }

  - lineinfile:
      path: "{{ firefox_profile.stdout }}/prefs.js"
      line: "user_pref(\"{{ item.key }}\", {{ item.value }});"
    check_mode: yes
    loop: "{{ firefox_prefs }}"
    register: firefox_prefs_previous
    changed_when: no

  - lineinfile:
      path: "{{ firefox_profile.stdout }}/user.js"
      line: "user_pref(\"{{ item.key }}\", {{ item.value }});"
      regexp: "^user_pref\\(\"{{ item.key }}\","
      create: yes
      mode: "600"
    loop: "{{ firefox_prefs }}"
    loop_control: { index_var: idx }
    when: firefox_prefs_previous.results[idx].msg == "line added"

  - slurp:
      src: "{{ item }}"
    loop:
      - "{{ firefox_profile.stdout }}/handlers.json"
      - "{{ firefox_profile.stdout }}/xulstore.json"
    register: firefox_handlers_xulstore

  - set_fact:
      firefox_handlers_old: "{{ firefox_handlers_xulstore.results[0].content | b64decode }}"
      firefox_handlers_new: "{{ firefox_handlers_xulstore.results[0].content | b64decode }}"
      firefox_xulstore_old: "{{ firefox_handlers_xulstore.results[1].content | b64decode }}"
      firefox_xulstore_new: "{{ firefox_handlers_xulstore.results[1].content | b64decode }}"

  - set_fact:
      firefox_handlers_new: "{{ firefox_handlers_new | combine({\"schemes\": {\"magnet\": {\"action\": 4}}}, recursive=True) }}"

  - set_fact:
      firefox_xulstore_new: "{{ firefox_xulstore_new | combine(item, recursive=True) }}"
    loop:
      - {"chrome://browser/content/browser.xhtml": {"PersonalToolbar": {"collapsed": "true"}}}
      - {"chrome://browser/content/places/historySidebar.xhtml": {"viewButton": {"selectedsort": "lastvisited"}}}

  - copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
    loop:
      - { content: "{{ firefox_handlers_new }}", dest: "{{ firefox_profile.stdout }}/handlers.json" }
      - { content: "{{ firefox_xulstore_new }}", dest: "{{ firefox_profile.stdout }}/xulstore.json" }
    loop_control: { index_var: idx }
    when: (idx == 0 and firefox_handlers_old != firefox_handlers_new) or
          (idx == 1 and firefox_xulstore_old != firefox_xulstore_new)

  - dnf:
      name: "{{ item.name }}"
      disable_gpg_check: "{{ item.disable_gpg_check | default('no') }}"
    become: yes
    loop:
      - { name: "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm", disable_gpg_check: yes }
      - { name: "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_distribution_major_version }}.noarch.rpm", disable_gpg_check: yes }
      - { name: "ffmpeg" }
      - { name: "gnome-subtitles" }
      - { name: "gnome-tweaks" }
      - { name: "keepassxc" }
      - { name: "newsboat" }
      - { name: "rclone" }
      - { name: "tlp" }
      - { name: "tlp-rdw" }
      - { name: "transmission-gtk" }
      - { name: "vim-enhanced" }
      - { name: "vlc" }
      - { name: "xclip" }

  - command: "{{ item }}"
    loop:
      - "flatpak remotes --columns=title"
      - "flatpak list --columns=application"
    register: flatpak_installed
    changed_when: no

  - command: flatpak remote-add "{{ item.name }}" "{{ item.location }}"
    become: yes
    loop:
      - { name: "flathub", location: "https://flathub.org/repo/flathub.flatpakrepo" }
    when: item.name not in flatpak_installed.results[0].stdout_lines | lower

  - command: flatpak install -y "{{ item.remote }}" "{{ item.ref }}"
    loop:
      - { remote: "fedora", ref: "org.gimp.GIMP" }
      - { remote: "flathub", ref: "com.spotify.Client" }
    when: item.ref not in flatpak_installed.results[1].stdout_lines

  - get_url:
      url: "{{ item.url }}"
      dest: "{{ item.dest }}"
      mode: "755"
    become: yes
    loop:
      - { url: "https://yt-dl.org/downloads/latest/youtube-dl", dest: "/usr/local/bin/youtube-dl" }

  - hostname:
      name: "{{ item }}"
      use: systemd
    loop:
      - "{{ hostname }}"

  - sysctl:
      name: "{{ item.name }}"
      value: "{{ item.value }}"
      sysctl_file: "{{ item.sysctl_file }}"
    become: yes
    loop:
      - { name: "vm.swappiness", value: "10", sysctl_file: "/etc/sysctl.d/99-swappiness.conf" }

  - systemd:
      name: "{{ item }}"
      masked: yes
    become: yes
    loop:
      - "systemd-rfkill.socket"

  - git:
      repo: "{{ item.repo }}"
      dest: "{{ item.dest }}"
    loop:
      - { repo: "https://github.com/luudvig/scripts.git", dest: "{{ ansible_env.HOME }}/Scripts" }

  - lineinfile:
      path: "{{ item.path }}"
      line: "{{ item.line }}"
      regexp: "{{ item.regexp }}"
      insertafter: "{{ item.insertafter | default('(?!)') }}"
      create: yes
    loop:
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "alias bc='bc -l'", regexp: "^alias bc=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "#alias bt-connect='while : ; do bluetoothctl connect  && break; done'", regexp: "^#?alias bt-connect=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "#alias bt-disconnect='while : ; do bluetoothctl disconnect  && break; done'", regexp: "^#?alias bt-disconnect=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "#alias bt-reconnect='bt-disconnect && bt-connect'", regexp: "^#?alias bt-reconnect=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "alias cp='cp -i'", regexp: "^alias cp=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "alias docker='podman'", regexp: "^alias docker=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "alias mv='mv -i'", regexp: "^alias mv=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "#alias rclone-copy='rclone copy  remote: --exclude *.swp --update'", regexp: "^#?alias rclone-copy=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "#alias rclone-sync='rclone sync remote:  --exclude *.swp --update'", regexp: "^#?alias rclone-sync=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "alias svtplay-dl='docker run -it --rm --security-opt label=disable -v $HOME/Downloads:/data spaam/svtplay-dl'", regexp: "^alias svtplay-dl=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "#alias ytsearch='$HOME/Scripts/ytsearch.py -k '", regexp: "^#?alias ytsearch=" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "export EDITOR='/usr/bin/vim'", regexp: "^export EDITOR=", insertafter: "^(# )?export" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "export HISTCONTROL='ignoreboth'", regexp: "^export HISTCONTROL=", insertafter: "^(# )?export" }
      - { path: "{{ ansible_env.HOME }}/.bashrc", line: "rclone-deletefile() { rclone deletefile \"remote:$1\" && rm \"$1\"; }", regexp: "^rclone-deletefile\\(\\)" }
      - { path: "{{ ansible_env.HOME }}/.config/containers/registries.conf", line: "unqualified-search-registries = ['docker.io']", regexp: "^unqualified-search-registries =" }
      - { path: "{{ ansible_env.HOME }}/.newsboat/config", line: "browser \"$HOME/.newsboat/browser.sh\"", regexp: "^browser " }
      - { path: "{{ ansible_env.HOME }}/.newsboat/config", line: "color info white blue bold", regexp: "^color info " }
      - { path: "{{ ansible_env.HOME }}/.newsboat/config", line: "color listfocus white blue bold", regexp: "^color listfocus " }
      - { path: "{{ ansible_env.HOME }}/.newsboat/config", line: "color listfocus_unread white blue bold", regexp: "^color listfocus_unread " }
      - { path: "{{ ansible_env.HOME }}/.newsboat/config", line: "macro c set browser \"printf %u | xclip -selection clipboard\" ; open-in-browser ; set browser \"$HOME/.newsboat/browser.sh\"", regexp: "^macro c " }
      - { path: "{{ ansible_env.HOME }}/.newsboat/config", line: "refresh-on-startup yes", regexp: "^refresh-on-startup " }
      - { path: "{{ ansible_env.HOME }}/.newsboat/config", line: "reload-threads 3", regexp: "^reload-threads " }
      - { path: "{{ ansible_env.HOME }}/.vimrc", line: "set indentexpr&", regexp: "^set indentexpr" }

  - copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
      mode: "775"
    loop:
      - { content: "#/bin/sh\n/usr/bin/firefox \"$@\" &\n", dest: "{{ ansible_env.HOME }}/.newsboat/browser.sh" }
